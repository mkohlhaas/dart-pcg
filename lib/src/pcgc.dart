// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// PCG Bindings
class PcgC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PcgC(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PcgC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Multi-step advance functions (jump-ahead, jump-back)
  int pcg_advance_lcg_8(
    int state,
    int delta,
    int cur_mult,
    int cur_plus,
  ) {
    return _pcg_advance_lcg_8(
      state,
      delta,
      cur_mult,
      cur_plus,
    );
  }

  late final _pcg_advance_lcg_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Uint8, ffi.Uint8, ffi.Uint8,
              ffi.Uint8)>>('pcg_advance_lcg_8');
  late final _pcg_advance_lcg_8 =
      _pcg_advance_lcg_8Ptr.asFunction<int Function(int, int, int, int)>();

  int pcg_advance_lcg_16(
    int state,
    int delta,
    int cur_mult,
    int cur_plus,
  ) {
    return _pcg_advance_lcg_16(
      state,
      delta,
      cur_mult,
      cur_plus,
    );
  }

  late final _pcg_advance_lcg_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Uint16, ffi.Uint16, ffi.Uint16,
              ffi.Uint16)>>('pcg_advance_lcg_16');
  late final _pcg_advance_lcg_16 =
      _pcg_advance_lcg_16Ptr.asFunction<int Function(int, int, int, int)>();

  int pcg_advance_lcg_32(
    int state,
    int delta,
    int cur_mult,
    int cur_plus,
  ) {
    return _pcg_advance_lcg_32(
      state,
      delta,
      cur_mult,
      cur_plus,
    );
  }

  late final _pcg_advance_lcg_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Uint32, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('pcg_advance_lcg_32');
  late final _pcg_advance_lcg_32 =
      _pcg_advance_lcg_32Ptr.asFunction<int Function(int, int, int, int)>();

  int pcg_advance_lcg_64(
    int state,
    int delta,
    int cur_mult,
    int cur_plus,
  ) {
    return _pcg_advance_lcg_64(
      state,
      delta,
      cur_mult,
      cur_plus,
    );
  }

  late final _pcg_advance_lcg_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Uint64, ffi.Uint64, ffi.Uint64,
              ffi.Uint64)>>('pcg_advance_lcg_64');
  late final _pcg_advance_lcg_64 =
      _pcg_advance_lcg_64Ptr.asFunction<int Function(int, int, int, int)>();
}
